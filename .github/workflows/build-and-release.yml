name: Build and Release

on:
  push:
    branches: ['*']  # Run on all branch pushes

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: ObLoader
            asset_name: ObLoader-linux
          - os: macos-latest
            platform: macos-arm
            artifact_name: ObLoader
            asset_name: ObLoader-macos-arm64
          - os: macos-latest
            platform: macos-intel
            artifact_name: ObLoader
            asset_name: ObLoader-macos-x86_64
          - os: windows-latest
            platform: windows
            artifact_name: ObLoader.exe
            asset_name: ObLoader-windows.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        
    - name: Configure CMake (Regular)
      if: matrix.platform != 'macos-intel'
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release
        
    - name: Configure CMake (macOS Intel)
      if: matrix.platform == 'macos-intel'
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release
      
    - name: List build directory contents (Windows)
      if: matrix.platform == 'windows'
      run: |
        dir ${{github.workspace}}\build\ /s /b | findstr /i "\.exe$"
      shell: cmd
      
    - name: List build directory contents (macOS)
      if: matrix.platform == 'macos-arm' || matrix.platform == 'macos-intel'
      run: |
        find ${{github.workspace}}/build -type f -perm +111 | grep -v "\.o$\|\.a$\|\.dylib$"
      shell: bash
      
    - name: List build directory contents (Linux)
      if: matrix.platform == 'linux'
      run: |
        find ${{github.workspace}}/build -type f -executable | grep -v "\.o$\|\.a$\|\.so$"
      shell: bash
      
    - name: Create artifact directory
      run: mkdir -p ${{github.workspace}}/artifacts
      shell: bash
      
    - name: Copy executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        mkdir ${{github.workspace}}\artifacts 2>nul
        for /f "delims=" %%F in ('where /r "${{github.workspace}}\build" ObLoader.exe') do (
          copy "%%F" "${{github.workspace}}\artifacts\ObLoader-windows.exe"
          echo "Executable found and copied from %%F"
          exit /b 0
        )
        echo "Could not find executable in build directory."
        exit /b 1
      shell: cmd
      
    - name: Copy executable (Unix)
      if: matrix.platform != 'windows'
      run: |
        export FOUND=0
        if [ -f "${{github.workspace}}/build/${{ matrix.artifact_name }}" ]; then
          cp "${{github.workspace}}/build/${{ matrix.artifact_name }}" "${{github.workspace}}/artifacts/${{ matrix.asset_name }}"
          export FOUND=1
        fi
        if [ -f "${{github.workspace}}/build/bin/${{ matrix.artifact_name }}" ]; then
          cp "${{github.workspace}}/build/bin/${{ matrix.artifact_name }}" "${{github.workspace}}/artifacts/${{ matrix.asset_name }}"
          export FOUND=1
        fi
        # Additional paths common in CMake projects
        if [ -f "${{github.workspace}}/build/Release/${{ matrix.artifact_name }}" ]; then
          cp "${{github.workspace}}/build/Release/${{ matrix.artifact_name }}" "${{github.workspace}}/artifacts/${{ matrix.asset_name }}"
          export FOUND=1
        fi
        if [ $FOUND -eq 0 ]; then
          # Last resort: try to find the executable ourselves
          EXEC_PATH=$(find "${{github.workspace}}/build" -name "${{ matrix.artifact_name }}" -type f | head -n 1)
          if [ ! -z "$EXEC_PATH" ]; then
            cp "$EXEC_PATH" "${{github.workspace}}/artifacts/${{ matrix.asset_name }}"
            export FOUND=1
            echo "Found executable at $EXEC_PATH"
          else
            echo "Could not find executable in the expected locations. Check the directory listing above."
            exit 1
          fi
        fi
      shell: bash

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{github.workspace}}/artifacts/${{ matrix.asset_name }}
        retention-days: 7
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get short SHA
      id: slug
      run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -R artifacts
      shell: bash
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: build-${{ github.run_number }}-${{ steps.slug.outputs.sha7 }}
        name: Build ${{ github.run_number }} (${{ steps.slug.outputs.sha7 }})
        files: |
          artifacts/ObLoader-linux/ObLoader-linux
          artifacts/ObLoader-macos-arm64/ObLoader-macos-arm64
          artifacts/ObLoader-macos-x86_64/ObLoader-macos-x86_64
          artifacts/ObLoader-windows.exe/ObLoader-windows.exe
        draft: false
        prerelease: true
        generate_release_notes: true
